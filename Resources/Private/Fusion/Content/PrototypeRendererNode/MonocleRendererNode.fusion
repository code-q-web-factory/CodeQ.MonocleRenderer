prototype(CodeQ.MonocleRenderer:Content.MonocleRendererNode) < prototype(Neos.Neos:ContentComponent) {
	@context {
		prototypeName = ${String.trim(q(node).property('prototypeName'))}
        useStyleguideProps = ${q(node).property('useStyleguideProps')}
		prototypeProps = ${Json.parse(q(node).property('json') || '{}')}
	}

	renderer = Neos.Fusion:Case {
		noPrototypeName {
			condition = ${!prototypeName && node.context.inBackend}
			renderer = CodeQ.PrototypeRendererNode:Content.PrototypeRendererNode.ErrorMessage {
				name = 'noPrototypeNameNotice'
			}
		}
        canRenderWithStyleguideProps {
            condition = Neos.Fusion:CanRender {
                type = ${prototypeName}
                @process.andIs = ${value && useStyleguideProps}
            }
            renderer = Sitegeist.Monocle:Preview.Prototype {
                prototypeName = ${prototypeName}
            }
        }
        jsonIsInvalid {
            condition = ${Type.getType(prototypeProps) != 'array' && node.context.inBackend}
            renderer = CodeQ.PrototypeRendererNode:Content.PrototypeRendererNode.ErrorMessage {
                name = 'jsonIsInvalidNotice'
            }
        }
		canRenderWithJson {
			condition = Neos.Fusion:CanRender {
				type = ${prototypeName}
			}
			renderer = Neos.Fusion:Renderer {
				type = ${prototypeName}
	            element.@apply.props = ${prototypeProps}
			}
		}
		prototypeDoesNotExist {
			condition = ${node.context.inBackend}
			renderer = CodeQ.PrototypeRendererNode:Content.PrototypeRendererNode.ErrorMessage {
				name = 'prototypeDoesNotExistNotice'
			}
		}
		frontendEmpty {
			condition = true
			renderer = ''
		}
	}
}

prototype(CodeQ.PrototypeRendererNode:Content.PrototypeRendererNode.ErrorMessage) < prototype(Neos.Fusion:Component) {
	name = ''

	renderer = afx`
		<div style="display: block; padding: 2rem; background: red; font-size: 2rem;">
			{I18n.translate('CodeQ.MonocleRenderer:NodeTypes.Content.MonocleRendererNode:' + props.name)}
		</div>
	`
}
